package repositories

import (
	"{{ .PackageName }}/internal/models"
	"gorm.io/gorm"
)

// Mock{{ .Name.Singular.Title }}Repository ...
type Mock{{ .Name.Singular.Title }}Repository struct {
}

// Get ... Get multiple entities
func (repository *Mock{{ .Name.Singular.Title }}Repository) Get(scopes ...func(*gorm.DB) *gorm.DB) (*[]models.{{ .Name.Singular.Title }}, error) {
    model, _ := models.GetFake{{ .Name.Singular.Title }}()
	data := []models.{{ .Name.Singular.Title }} {*model}
	return &data, nil
}

// Count ... Count entities
func (repository *Mock{{ .Name.Singular.Title }}Repository) Count(scopes ...func(*gorm.DB) *gorm.DB) (int64, error) {
    return 0, nil
}

// First ... Get single entity
func (repository *Mock{{ .Name.Singular.Title }}Repository) First(scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .Name.Singular.Title }}, error) {
    return models.GetFake{{ .Name.Singular.Title }}()
}

// Create ...
func (repository *Mock{{ .Name.Singular.Title }}Repository) Create(model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
	return model, nil
}

// Save ...
func (repository *Mock{{ .Name.Singular.Title }}Repository) Save(model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
	return model, nil
}

// Delete ... Delete entity
func (repository *Mock{{ .Name.Singular.Title }}Repository) Delete(model *models.{{ .Name.Singular.Title }}) error {
    return nil
}
