package models

import (
	"time"

	"github.com/bxcodec/faker/v3"
{{- if .HasJson }}
    "github.com/jinzhu/gorm/dialects/postgres"
{{ end }}
{{- if .HasDecimal }}
    "github.com/shopspring/decimal"
{{ end }}
)

// {{ .ObjectName }} ... {{ .Description }}
type {{ .ObjectName }} struct {
{{- range .Columns}}
    {{ .ObjectName }} {{ .ObjectType }} `gorm:"{{if .Primary }}primaryKey;{{end}}column:{{ .Name }}" json:"{{ .Name }}"`
{{- end }}
	CreatedAt      time.Time `gorm:"column:created_at" json:"createdAt"`
	UpdatedAt      time.Time `gorm:"column:updated_at" json:"updatedAt"`

{{- range .Relations}}
{{- if eq .RelationType "belongsTo" }}
    {{ .ObjectName }} {{if .MultipleEntities }}[]]{{end}}{{ .Entity.ObjectName }}
{{- end -}}
{{- end -}}
}

// TableName sets the insert table name for this struct type
func (entity *{{ .ObjectName }}) TableName() string {
	return "{{ .Name }}"
}

// GetFake{{ .ObjectName }} ... get fake {{ .ObjectName }} model
func GetFake{{ .ObjectName }}() (*{{ .ObjectName }}, error) {
	entity := &{{ .ObjectName }}{}
	err := faker.FakeData(entity)

	if err != nil {
		return nil, err
	}

	entity.CreatedAt = time.Now()
	entity.UpdatedAt = time.Now()

	return entity, nil
}
