package models

import (
	"time"

	"github.com/bxcodec/faker/v3"
)

// {{ .ObjectName }} ... {{ .Description }}
type {{ .ObjectName }} struct {
	ID             uint64    `gorm:"primaryKey;column:id" json:"id"`
	Platform       string    `gorm:"column:platform" json:"platform"`
	Version        string    `gorm:"column:version" json:"version"`
	MustUpdate     bool      `gorm:"column:must_update" json:"mustUpdate"`
	IntegerVersion int64     `gorm:"column:integer_version" json:"integerVersion"`
	AvailableFrom  int32     `gorm:"column:available_from" json:"availableFrom"`
	CreatedAt      time.Time `gorm:"column:created_at" json:"createdAt"`
	UpdatedAt      time.Time `gorm:"column:updated_at" json:"updatedAt"`
}

// TableName sets the insert table name for this struct type
func (entity *{{ .ObjectName }}) TableName() string {
	return "{{ .Name }}"
}

// GetFake{{ .ObjectName }} ... get fake {{ .ObjectName }} model
func GetFake{{ .ObjectName }}() (*{{ .ObjectName }}, error) {
	entity := &{{ .ObjectName }}{}
	err := faker.FakeData(entity)

	if err != nil {
		return nil, err
	}

	entity.CreatedAt = time.Now()
	entity.UpdatedAt = time.Now()

	return entity, nil
}
