package repositories

import (
	"{{ .PackageName }}/internal/models"
	"gorm.io/gorm"
)

// {{ .Name.Singular.Title }}RepositoryInterface ...
type {{ .Name.Singular.Title }}RepositoryInterface interface {
	Get(scopes ...func(*gorm.DB) *gorm.DB) (*[]models.{{ .Name.Singular.Title }}, error)
    Count(scopes ...func(*gorm.DB) *gorm.DB) (int64, error)
	First(scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .Name.Singular.Title }}, error)
	Create(model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error)
	Save(model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error)
    Delete(model *models.User) error
}

// {{ .Name.Singular.Title }}Repository ...
type {{ .Name.Singular.Title }}Repository struct {
	database *gorm.DB
}

// Get ... Get multiple entities
func (repository *{{ .Name.Singular.Title }}Repository) Get(scopes ...func(*gorm.DB) *gorm.DB) (*[]models.{{ .Name.Singular.Title }}, error) {
	var data []models.{{ .Name.Singular.Title }}

	if err := repository.database.Scopes(scopes...).First(&data).Error; err != nil {
		return nil, err
	}

	return &data, nil
}

// Count ... Count entities
func (repository *{{ .Name.Singular.Title }}Repository) Count(scopes ...func(*gorm.DB) *gorm.DB) (int64, error) {
	var count int64
	if err := repository.database.Scopes(scopes...).Count(&count).Error; err != nil {
		return 0, err
	}

	return count, nil
}

// First ... Get single entity
func (repository *{{ .Name.Singular.Title }}Repository) First(scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .Name.Singular.Title }}, error) {
	var model models.{{ .Name.Singular.Title }}
	if err := repository.database.Scopes(scopes...).First(&model).Error; err != nil {
		return nil, err
	}
	return &model, nil
}

// Create ... Create new entity
func (repository *{{ .Name.Singular.Title }}Repository) Create(model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
	err := repository.database.Transaction(func(tx *gorm.DB) error {
		return repository.database.Create(&model).Error
	})
	if err != nil {
		return nil, err
	}
	return repository.First(ByID(model.ID))
}

// Save ... Update entity
func (repository *{{ .Name.Singular.Title }}Repository) Save(model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
	err := repository.database.Transaction(func(tx *gorm.DB) error {
		return repository.database.Save(&model).Error
	})
	if err != nil {
		return nil, err
	}
	return repository.First(ByID(model.ID))
}

// Delete ... Delete entity
func (repository *{{ .Name.Singular.Title }}Repository) Delete(model *models.{{ .Name.Singular.Title }}) error {
    var checkModel models.{{ .Name.Singular.Title }}
    if err := repository.database.Scopes(ByID(model.ID)).First(&checkModel).Error; err != nil {
        return err
    }
    err := repository.database.Transaction(func(tx *gorm.DB) error {
        return repository.database.Delete(&models.{{ .Name.Singular.Title }}{
            ID: model.ID,
        }).Error
    })
    if err != nil {
        return err
    }
    return nil
}

// New{{ .Name.Singular.Title }}Repository ... Create new repository
func New{{ .Name.Singular.Title }}Repository(database *gorm.DB) {{ .Name.Singular.Title }}RepositoryInterface {
	return &{{ .Name.Singular.Title }}Repository{database: database}
}
