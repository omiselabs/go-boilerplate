package repositories

import (
	"{{ .PackageName }}/internal/models"
	"gorm.io/gorm"
)

// {{ .ObjectName }}RepositoryInterface ...
type {{ .ObjectName }}RepositoryInterface interface {
	Find(scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .ObjectName }}, error)
	Create(model *models.{{ .ObjectName }}) (*models.{{ .ObjectName }}, error)
	Save(model *models.{{ .ObjectName }}) (*models.{{ .ObjectName }}, error)
	ByPlatform(platform string) func(*gorm.DB) *gorm.DB
	NewerThanIntegerVersion(integerVersion int64) func(*gorm.DB) *gorm.DB
	ByAppVersion(version string) func(*gorm.DB) *gorm.DB
	ByMustUpdate(mustUpdate bool) func(*gorm.DB) *gorm.DB
}

// {{ .ObjectName }}Repository ...
type {{ .ObjectName }}Repository struct {
	database *gorm.DB
}

// Find ...
func (repository *{{ .ObjectName }}Repository) Find(scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .ObjectName }}, error) {
	var model models.{{ .ObjectName }}
	if err := repository.database.Scopes(scopes...).First(&model).Error; err != nil {
		return nil, err
	}
	return &model, nil
}

// Create ...
func (repository *{{ .ObjectName }}Repository) Create(model *models.{{ .ObjectName }}) (*models.{{ .ObjectName }}, error) {
	err := repository.database.Transaction(func(tx *gorm.DB) error {
		return repository.database.Create(&model).Error
	})
	if err != nil {
		return nil, err
	}
	return repository.Find(ByID(model.ID))
}

// Save ...
func (repository *{{ .ObjectName }}Repository) Save(model *models.{{ .ObjectName }}) (*models.{{ .ObjectName }}, error) {
	err := repository.database.Transaction(func(tx *gorm.DB) error {
		return repository.database.Save(&model).Error
	})
	if err != nil {
		return nil, err
	}
	return repository.Find(ByID(model.ID))
}

// New{{ .ObjectName }}Repository ...
func New{{ .ObjectName }}Repository(database *gorm.DB) {{ .ObjectName }}RepositoryInterface {
	return &{{ .ObjectName }}Repository{database: database}
}
